1.应用(Application)
    一个Koa Application 由一系列generator中间件组件。按照编码顺序在栈内一次执行，从这个角度来看，Koa app 和 其他中间系统没有什么太大的差别。
    Koa提供了一种基于底层中间件编码【语法糖】的设计思想。
    中间插件：
        内容协商(content-negotation)
        缓存控制(cache freshness)
        反向代理(proxy support)
        重定向等等功能的常用中间件
    KOA内核并不会打包这些中间件。

2.级联代码(Cascading)
    Koa中间件以一种非常传统的方法级联。在以往的Node开发中，频繁使用回调不太便于展示复杂的逻辑代码。
    Koa执行代码的方式有点像回形针，用户请求通过中间件，遇到 yield next 关键字时，会被传递到下一个符合请求的路由(downstream),在yield next捕获不到下一个中间件时，逆序返回继续执行代码(upstream).
    一开始，用户的请求通过 x-response-time 中间件和 logging 中间件，这俩个中间件记录了一些请求细节，然后穿过response中间件一次，最终结束请求，返回[Hello world].

 var koa = require('koa');
 var app = koa();

 //x-response-time
 app.use(function *(next)){
    //1).进入路由
    var start = new Date;
    yield next;
    //5).再次进入 x-response-time中间件，记录2次通过中间件【穿越】的时间
    var ms = new Date - start;
    this.set('X-Response-Time',ms + 'ms');
    //6.返回this.body
 });

//logger
 app.use(function *(next){
    //2).进入logger中间件
    var start = new Date;
    yield next;
    //4).再次进入logger中间件，记录2此通过中间件的【穿越】时间
    var ms = new Date - start;
    console.log('%s %s - %s',this.method,this.url,ms);
 });

 app.use(function *(){
    //3).进入response中间件，没有捕获到下一个符合条件的中间件，传递到upstream
    this.body = 'Hello World';
 });

 app.listen(3000);



 3.应用配置(Settings):
    应用的配置是app实例的属性，目前来说，Koa的配置项如下：
    。app.name 应用名称
    。app.env 执行环境，默认是NODE_ENV 或者 "development"字符串
    。app.proxy 决定哪些 proxy header参数会被加到信任列表中
    。app.subdomainOffset被忽略的 .subdomains列表。

 常用方法：
    app.listen(...);
    用于启动一个服务的快捷方法，
    var koa = require('koa');
    var app = koa();
    app.listen(3000);

    app.listen是http.createServer的简单包装，它实际上是这样运行的
    var http = require('http');
    var koa = require('koa');
    var app = koa();
    http.createServer(app.callback()).listen(3000);

    如果有需要，你可以在多个端口上启动一个app，比如同时支持HTTP 和 HTTPS:
    var http = require('http');
    var koa = require('koa');
    var app = koa();
    http.createServer(app.callback()).listen(3000);
    http.createServer(app.callback()).listen(3001);

    app.callback():
    返回一个可被http.createServer()接受的程序实例，也可以将这个返回函数挂在一个Connect/Express应用中。

    app.use(function):
    将给定的function当做中间件加载到应用中。

    app.keys =
    设置一个签名Cookie的秘钥。这些参数会被传递给KeyGrip如果想自己生产一个实例，如下：
    app.keys = ['i am a newer secret','i like turtle'];
    app.keys = new KeyGrip(['i am a newer secret',' like turtle','sha256']);
    注意，签名秘钥只在配置项signed参数为真时才会有生效的。
    this.cookies.set('name','allen',{signed:true});

    错误处理(Error Handling):
    除非NODE_ENV被配置为test,Koa都将会所有错误信息输出到stderr，也可以自定义 错误事件  来监听 Koa app中发生的错误，比如记录错误日志
    app.on('error',function(err){
        log.error('server errror',err);
    });

    当任何req 或者 res中出现的错误无法被回应到客户端时，Koa会在第二个参数传入这个错误的上下文：
        app.on('error',function(err,ctx){
            log.error('server error',err,ctx);
        });
    任何错误有可能被回应到客户端，比如当没有新数据写入socket时，Koa会默认返回一个500错误，并抛出一个app级别的错误到日志处理中间件中。

    应用上下文(Context):
    Koa的上下文封装了request 与 response对象至一个对象中，并提供了一些帮助开发者编写业务逻辑的方法。为了方便，你可以在ctx.request 和 ctx.response中访问到这些方法。

    每一个请求都会创建一段上下文。在控制业务逻辑的中间件中，上下文被寄存在this对象中：
    app.use(function *(){
        this;//上下文对象
        this.request;//Request对象
        this.response;//Response对象
    });
    为了方便使用，许多上下文属性和方法都被委托代理到他们的ctx.request 或 ctx.response,比如访问 ctx.type 和 ctx.length将被代理到response对象，ctx.path 和 ctx.method将被代理到request对象

    Request对象：
    ctx.request对象是对Node原声请求对象的抽象包装，提供了一些非常有用的方法。
    req.header:返回请求头
    req.method:返回请求方法
    req.method= : 设置req.method,用于实现输入 methodOverride()的中间件
    req.length:返回req对象的Content-Length(Number)
    req.url:返回请求url
    req.url=:设置请求url，用于进行url重写
    req.path:返回请求pathname
    req.path=:设置请求的pathname，如果原有url存在查询字符串，则保留这些查询
    req.querystring:返回url中查询字符串，去除了头部的'?'
    req.querystring=:设置查询字符串，不包含'?'
    req.search:返回url中得查询字符串，包含了头部的'?'
    req.search=:设置查询字符串，包含'?'
    req.host:返回请求主机名，不包含端口；当app.proxy设置为true时，支持X-Forwarded-Host.
    req.type:返回req对象的Content-Type，不包括charset属性，范例代码：
       var ct = this.type;
    req.query:返回经过解析的查询字符串，类似Express中的req.query,当不存在查询字符串时，返回空对象。
    当url包含查询字符串"color=blue$size=small"时，返回如下：
        {
            color:'blue',
            size:'small'
        }
    req.query=:设置给定的对象为查询对象。范例代码如下：
        this.query = {next:'/login'}
    req.fresh:检查客户端请求的缓存是否是最新。当缓存为最新时，可编写业务逻辑直接返回304，范例代码如下：
        this.set('ETag','123');

        //当客户端缓存是最新时
        if(this.fresh){
            this.status = 304;
            return;
        }

        //当客户端缓存已经过期时，返回最新的数据
        this.body = yield db.find('something');
     req.stale:与req.fresh返回的结果正好相反
     req.protocol:返回请求协议名，如"https"或者"http";当app.proxy设置为true时，支持X-Forwarded-Proto.
     req.secure:判断请求协议是否为HTTPS的快捷键方法，等同于 this.protocol == "https"
     req.ip:返回请求IP；当app.proxy设置为true时，支持X-Forwarded-For.
     req.ips:返回请求IP列表，仅当app.proxy设置为true时，并存在X-Forwarded-For列表时，否则返回空数组。
     req.subdomains:返回请求对象中的子域名数组。子域名数组会自动由请求域名字符串中得.分割开，在没有设置自定义的app.subdomainOffset参数时，默认返回根域名之前的所有子域名数组。
     例如：当请求域名为"allen.ferrets.example.com"时候，返回["ferrets","allen"],数组顺序是子代域名在前，孙代域名在后。
     req.is(type):判断请求对象中Content-Type是否给定type的快捷键方法，如果不存在request.body,将返回undefined，如果没有符合的类型，返回false，除此之外，返回匹配的类型字符串。
     req.accepts(type):判断请求对象中Accept是否给定type的快捷方法，当匹配到符合的类型时，返回最匹配的类型，否则返回false，传入参数可以是字符串或者数组


